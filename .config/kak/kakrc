# colorscheme
colorscheme gruvbox

# don't display autocomplete by default
set-option global autocomplete prompt

# turn off ui ncurses_assistant
set-option global ui_options ncurses_assistant=none

# map jk to esc 
# hook global InsertChar k %{ try %{
#     exec -draft hH <a-k>jk<ret> d
#     exec -with-hooks <esc>
# }}

# System Copy and Paste
hook global RegisterModified '"' %{ nop %sh{
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}
map global user P 'xsel --output --clipboard<ret>' -docstring 'page'
map global user p '<a-!>xsel --output --clipboard<ret>'

# line numbers 
# add-highlighter global/ number-lines -relative

# tab stuff
set global indentwidth 4
set global tabstop 4

# change color during insert mode (only looks good with gruvbox)
hook global ModeChange push:.*:insert %{
    set-face window PrimaryCursor rgb:ebdbb2,rgb:484848
    set-face window PrimaryCursorEol rgb:ebdbb2,rgb:484848
    set-face window PrimarySelection rgb:ebdbb2,rgb:323232
}
hook global ModeChange pop:insert:.* %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
    unset-face window PrimarySelection
}

# dmenu - doesn't work right now :(
define-command dmenu-buffers -docstring 'Select an open buffer using dmenu' %{ evaluate-commands %sh{
      BUFFER=$(printf "%s\n" "${kak_buflist}" | tr " " "\n" | dmenu | tr -d \')
      if [ -n "$BUFFER" ]; then
          printf "%s\n" "buffer ${BUFFER}"
      fi
  }
}
map global user b dmenu-buffers

# from the wiki
def suspend-and-resume \
    -params 1..2 \
    -docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

    # Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
    cli_cmd="$1 && fg"
    post_resume_cmd="$2"

    # automation is different platform to platform
    platform=$(uname -s)
    case $platform in
        Darwin)
            automate_cmd="sleep 0.01; osascript -e 'tell application \"System Events\" to keystroke \"$cli_cmd\" & return '"
            kill_cmd="/bin/kill"
            break
            ;;
        Linux)
            automate_cmd="sleep 0.2; xdotool type '$cli_cmd'; xdotool key Return"
            kill_cmd="/usr/bin/kill"
            break
            ;;
    esac

    # Uses platforms automation to schedule the typing of our cli command
    nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &
    # Send kakoune client to the background
    $kill_cmd -SIGTSTP $kak_client_pid

    # ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

    # Upon resume, run the kak command is specified
    if [ ! -z "$post_resume_cmd" ]; then
        echo "$post_resume_cmd"
    fi
}}

def toggle-broot %{
    suspend-and-resume "br"
}

map global user b ': toggle-broot<ret>' -docstring "select files in broot"
